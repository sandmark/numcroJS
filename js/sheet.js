// Generated by CoffeeScript 1.7.1
$(function() {
  $("#size").validate({
    rules: {
      x: {
        required: true,
        digits: true,
        min: 1
      },
      y: {
        required: true,
        digits: true,
        min: 1
      }
    },
    submitHandler: function(form) {
      $("#size_error").hide("fast");
      return $(form).createSheet();
    },
    invalidHandler: function(form, validator) {
      return $("#size_error").showError();
    },
    errorClass: "has-error",
    validClass: "has-success",
    errorPlacement: function(error, element) {},
    highlight: function(element, errorClass) {
      return $(element).parent().addClass(errorClass);
    },
    unhighlight: function(element, errorClass) {
      return $(element).parent().removeClass(errorClass).addClass("has-success");
    }
  });
  $("#answerForm").validate({
    rules: {
      length: {
        required: true,
        digits: true,
        min: 1
      }
    },
    submitHandler: function(form) {
      $("#answer_error").hide("fast");
      return $(form).createAnswer();
    },
    invalidHandler: function(form, validator) {
      return $("#answer_error").showError();
    },
    errorClass: "has-error",
    validClass: "has-success",
    errorPlacement: function(error, element) {},
    highlight: function(element, errorClass) {
      return $(element).parent().addClass(errorClass);
    },
    unhighlight: function(element, errorClass) {
      return $(element).parent().removeClass(errorClass).addClass("has-success");
    }
  });
  $.fn.createAnswer = function() {
    var answer, i, input, td, tr, _i, _ref;
    answer = $("#answer");
    if (answer.find("input").length > 0) {
      $("#answerAlreadyExistsError").showError();
    } else {
      tr = answer.find("tr");
      for (i = _i = 0, _ref = $(this).length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        input = $("<input type='text' autocomplete='off' class='text-center'>");
        td = $("<td class='text-center'>");
        td.append(input);
        tr.prepend(td);
      }
      answer.animate({
        height: "toggle",
        opacity: "toggle"
      }, "slow", function() {
        answer.find("input")[0].focus();
        return answer.registerKeys();
      });
    }
    return false;
  };
  $.fn.showError = function() {
    if ($(this).isVisible()) {
      return $(this).find("p[name=message]").fadeOut("fast", function() {
        return $(this).fadeIn("fast");
      });
    } else {
      return $(this).show("fast");
    }
  };
  $.fn.createSheet = function() {
    var col, input, row, sheet, tbody, td, tr, x, y, _i, _j;
    sheet = $("#sheet");
    tbody = sheet.find("tbody");
    if (tbody.children().length > 0) {
      $("#sheet_generated").showError();
      sheet.find("input")[0].focus();
    } else {
      x = $(this).find("[name=x]").val();
      y = $(this).find("[name=y]").val();
      input = '<input type="text" autocomplete="off" class="text-center">';
      for (row = _i = 0; _i < y; row = _i += 1) {
        tr = $("<tr>");
        for (col = _j = 0; _j < x; col = _j += 1) {
          td = $("<td class='text-center'>");
          td.append($(input));
          tr.append(td);
        }
        tbody.append(tr);
      }
      sheet.animate({
        height: "toggle",
        opacity: "toggle"
      }, "slow", function() {
        if (!$("#answer").isVisible()) {
          $("#answerInvisibleError").showError();
          return $("#answerForm").find("input")[0].focus();
        } else {
          $(this).find("input")[0].focus();
          return sheet.registerKeys();
        }
      });
    }
    return false;
  };
  $.fn.registerKeys = function() {
    return $(this).find("input").keypress(function(e) {
      var code, keyEnter;
      keyEnter = 13;
      code = e.keyCode || e.which;
      if (code === keyEnter) {
        $(":input:eq(" + ($(':input').index(this) + 1) + ")").focus();
        return false;
      }
    });
  };
  $("#sheet").submit(function() {
    $(this).find("button").hide("slow");
    $(this).find("input").each(function() {
      var e, height, input, n, width;
      e = $(this);
      n = Number(e.val());
      width = e.parent().width();
      height = e.parent().height();
      e.parent().width(width);
      e.parent().height(height);
      if (isNaN(n) || n === 0) {
        return e.parent().addClass("cell-block").end().remove();
      } else {
        input = "<input placeholder='" + n + "' type='text' autocomplete='off' class='text-center'>";
        return e.replaceWith(input);
      }
    });
    $(this).registerSync();
    return false;
  });
  return $.fn.registerSync = function() {};
});
